@page "/converter"
@attribute [Authorize]

@using ATAFurniture.Server.Models
@using ATAFurniture.Server.DataAccess
@using ATAFurniture.Server.Components.FileDisplay

<RadzenStack Gap="1em">
    <UserCreditsComponent UserContextService="@UserContextService"/>
    <TargetCompanySelectionComponent UserContextService="@UserContextService" Context="@Context"/>
    <FileUploadComponent UserContextService="@UserContextService" Context="@Context"/>
    
    @if (Context.Details.Any())
    {
        <FileDisplayComponent Context="@Context"/>
    }

    @if (Context.Files.Any())
    {
        <OrderHandlingComponent UserContextService="@UserContextService"  Context="@Context"/>
    }
</RadzenStack>

@code {
    [Inject] UserContextService UserContextService { get; set; }
    private ConverterContext Context { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        if (UserContextService.User is null)
        {
            await UserContextService.ExtractUserIdentity();
        }

        var lastSelection = UserContextService.User!.LastSelectedCompany;
        Context.TargetCompany = lastSelection ?? await UserContextService.GetPreviouslySelectedTargetCompanyAsync();

        Context.ContactInfo.CompanyName = UserContextService.User.CompanyName;
        Context.ContactInfo.MobileNumber = UserContextService.User.MobileNumber;
        Context.ContactInfo.Email = UserContextService.User.Email;

        Context.PropertyChanged += OnContextPropertyChanged;
        await base.OnInitializedAsync();
    }

    private void OnContextPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName is nameof(ConverterContext.Details) or nameof(ConverterContext.Files))
        {
            StateHasChanged();
        }
    }
}