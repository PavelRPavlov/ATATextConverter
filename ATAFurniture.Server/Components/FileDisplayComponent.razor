@using ATAFurniture.Server.Models
@using Kroiko.Domain.CellsExtracting
@using Kroiko.Domain.TemplateBuilding
@implements IDisposable

@if (ConverterContext.Details.Count > 0)
{
    <SfCard>
        <SfTab ShowCloseButton="false" AllowDragAndDrop="false" EnablePersistence="true">
            <TabAnimationSettings>
                <TabAnimationPrevious Effect="AnimationEffect.None"></TabAnimationPrevious>
                <TabAnimationNext Effect="AnimationEffect.None"></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                @foreach (var file in _files)
                {
                    <TabItem>
                        <HeaderTemplate>
                            <SfInPlaceEditor @bind-Value="@file.FileName" TValue="string" SubmitOnEnter="true" EnablePersistence="true" ShowButtons="true" >
                                <EditorComponent>
                                    <SfTextBox @bind-Value="@file.FileName"></SfTextBox>
                                </EditorComponent>
                            </SfInPlaceEditor>
                        </HeaderTemplate>
                        <ContentTemplate>
                            <SfGrid DataSource="@file.Details"/>
                        </ContentTemplate>
                    </TabItem>
                }
            </TabItems>
        </SfTab>
    </SfCard>
}
@code {

    [CascadingParameter] ConverterContext ConverterContext { get; set; }
    
    private List<KroikoFile> _files = [];
    
    protected override Task OnInitializedAsync()
    {
        ConverterContext.PropertyChanged += ConverterContext_PropertyChanged;
        return Task.CompletedTask;
    }

    private void ConverterContext_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (ConverterContext?.TargetCompany?.Name == SupportedCompanies.Lonira.Name)
        {
            var groups = ConverterContext.Details.GroupBy(x => x.Material).ToList();
            foreach (var group in groups.Where(group => !string.IsNullOrEmpty(group.Key)))
            {
                _files.Add(new KroikoFile { FileName = group.Key, Details = group.ToList().ToLoniraDetails() });
            }
            
        }
        StateHasChanged();
    }


    public void Dispose()
    {
        ConverterContext.PropertyChanged -= ConverterContext_PropertyChanged;
    }
        
    

}