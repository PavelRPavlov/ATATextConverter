@using ATAFurniture.Server.Models
@using ATAFurniture.Server.Services
@using Microsoft.Extensions.Options
@inherits UserClaimsBase
<AuthorizeView>
    <h4>
        @context.User.Identity.Name has successfully signed-in
    </h4>
    Claims from the ID token
    @* <table class="table"> *@
    @*     <thead> *@
    @*         <tr> *@
    @*             <th>Claim Type</th> *@
    @*             <th>Value</th> *@
    @*         </tr> *@
    @*     </thead> *@
    @*     <tbody> *@
    @*         @foreach (var claim in _claims) *@
    @*         { *@
    @*         <tr> *@
    @*             <td>@claim.Type</td> *@
    @*             <td>@claim.Value</td> *@
    @*         </tr> *@
    @*         } *@
    @*     </tbody> *@
    @* </table> *@

    <h1>Secret is</h1>

    <h4>@secretValue</h4>

    <h1>Read User from DB:</h1>
    <button @onclick="ReadUser">Read User</button>
    <button @onclick="SaveUser">Save User</button>
    <button @onclick="AddCredits">Add Credits</button>
    <p>Info in DB</p>
    <p>@_userInDb?.ToString()</p>
</AuthorizeView>

@code {
    
    [Inject]
    UserContextService UserContextService { get; set; }
    private User _userInDb = null;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //await CreateUserContext();
    }

    private async void AddCredits()
    {
        // _userInDb.AddCredits(14);
        // await EnsureDatabaseContainer();
        // ItemResponse<User> userResponse;
        // try
        // {
        //     userResponse = await _container.ReplaceItemAsync(_userInDb, _userInDb.Id, new PartitionKey(User.PARTITION_KEY));
        // }
        // catch (Exception e)
        // {
        //     ;
        // }
        //
        // ;
    }

    private async void ReadUser()
    {
        // await EnsureDatabaseContainer();
        // var userId = _claims.First(c => c.Type.Equals("oid")).Value;
        // ItemResponse<User> userResponse = null;
        // try
        // {
        //     userResponse = await _container.ReadItemAsync<User>(userId, new PartitionKey(User.PARTITION_KEY));
        // }
        // catch (CosmosException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        // {
        //     ;
        // }
        // _userInDb = userResponse?.Resource;
        // StateHasChanged();
    }

    private async void SaveUser()
    {
        // await EnsureDatabaseContainer();
        // var userId = _claims.First(c => c.Type.Equals("oid")).Value;
        // ItemResponse<User> userResponse = null;
        //
        // try
        // {
        //     userResponse = await _container.ReadItemAsync<User>(userId, new PartitionKey(User.PARTITION_KEY));
        // }
        // catch (CosmosException ex) when (ex.StatusCode == HttpStatusCode.NotFound)
        // {
        //     var user = new User
        //     {
        //         Id = userId,
        //         CreditsCount = UserContext.CreditCount
        //     };
        //     
        //     userResponse = await _container.CreateItemAsync(user, new PartitionKey(User.PARTITION_KEY));
        // }
        //
        // _userInDb = userResponse?.Resource;
    }
}