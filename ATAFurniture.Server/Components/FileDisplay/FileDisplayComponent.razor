@using ATAFurniture.Server.Models
@using Kroiko.Domain.CellsExtracting
@using Kroiko.Domain.TemplateBuilding
@using TextAlign = Syncfusion.Blazor.Grids.TextAlign
@using System.Collections.ObjectModel
@using System.Diagnostics
@using System.Timers
@using Timer = System.Threading.Timer
@implements IDisposable


<RadzenCard>
    <RadzenLabel class="py-3" Text="Прегледай информацията и редактирай при необходимост:"></RadzenLabel>
    @if (_isLoadingFiles)
    {
        <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
            <Template><h6>Working</h6></Template>
        </RadzenProgressBarCircular>
    }
    else
    {
        <SfTab ShowCloseButton="false" AllowDragAndDrop="false" EnablePersistence="true" ReorderActiveTab="false">
            <TabEvents Selecting="OnTabItemSelected"/>
            <TabAnimationSettings>
                <TabAnimationPrevious Effect="AnimationEffect.None"></TabAnimationPrevious>
                <TabAnimationNext Effect="AnimationEffect.None"></TabAnimationNext>
            </TabAnimationSettings>
            <TabItems>
                @foreach (var file in Context.Files)
                {
                    switch (Context.TargetCompany.Name)
                    {
                        case nameof(SupportedCompanies.Lonira):
                            <LoniraTabItemContent File="@file" Context="@Context"/>
                            break;
                        case nameof(SupportedCompanies.Suliver):
                            <SuliverTabItemContent File="@file" Context="@Context"/>
                            break;
                        default:
                            break;
                    }
                }
            </TabItems>
        </SfTab>
    }
</RadzenCard>

@code {

    [Parameter] public ConverterContext Context { get; set; }

    private bool _isLoadingFiles = true;
    private bool _isInternalChange = false;

    protected override void OnInitialized()
    {
        Context.PropertyChanged += ContextPropertyChanged;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LoadDataSource();
        }
    }

    private void ContextPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ConverterContext.Details) ||
            e.PropertyName == nameof(ConverterContext.TargetCompany) && 
            !_isInternalChange)
        {
            LoadDataSource();
        }
    }

    private void LoadDataSource()
    {
        _isLoadingFiles = true;
        var result = new List<KroikoFile>();
        switch (Context.TargetCompany.Name)
        {
            case nameof(SupportedCompanies.Lonira):
                var groups = Context.Details.GroupBy(x => x.Material).ToList();
                foreach (var group in groups.Where(group => !string.IsNullOrEmpty(group.Key)))
                {
                    result.Add(new KroikoFile { FileName = group.Key, Details = group.ToList().ToLoniraDetails() });
                }

                break;
            case nameof(SupportedCompanies.Suliver):
                if (Context.Details.Any())
                {
                    result.Add(new KroikoFile
                    {
                        // TODO what is the required file name
                        FileName = "Suliver",
                        Details = Context.Details.ToSuliverDetails()
                    });
                }
                break;
        }

        _isInternalChange = true;
        Context.Files = new ObservableCollection<KroikoFile>(result);
        _isInternalChange = false;
        _isLoadingFiles = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        Context.PropertyChanged -= ContextPropertyChanged;
    }

    private void OnTabItemSelected(SelectingEventArgs obj)
    {
        if (obj.IsSwiped)
        {
            obj.Cancel = true;
        }
    }

}
<style>
    .e-tab .e-tab-header {
       background: #FAFAFA !important;
       color: whitesmoke;
   }
   .e-tab .e-tab-header .e-toolbar-item.e-active {
        border-left: 1px solid black;
        border-top: 1px solid black;
        border-right: 1px solid black;
        border-radius: 6px 6px 0 0;
        color: black;
    }
    .e-tab .e-tab-header .e-toolbar-item .e-tab-wrap:hover {
        border-left: 1px solid black;
        border-top: 1px solid black;
        border-right: 1px solid black;
        border-radius: 6px 6px 0 0;
        color: black;
     }
   .e-tab .e-content {
        background: #FAFAFA !important;
        border: 1px solid black;
   }
</style>