@using ATAFurniture.Server.Models
@using Kroiko.Domain.CellsExtracting
@using Kroiko.Domain.TemplateBuilding
@using TextAlign = Syncfusion.Blazor.Grids.TextAlign
@implements IDisposable

@if (Context.Details.Count > 0)
{
    <RadzenCard class="p-3">
        @if (_isLoadingFiles)
        {
            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                <Template><h6>Working</h6></Template>
            </RadzenProgressBarCircular>
        }
        else
        {
            <SfTab ShowCloseButton="false" AllowDragAndDrop="false" EnablePersistence="true" ReorderActiveTab="false">
                <TabEvents Selecting="OnTabItemSelected"/>
                <TabAnimationSettings>
                    <TabAnimationPrevious Effect="AnimationEffect.None"></TabAnimationPrevious>
                    <TabAnimationNext Effect="AnimationEffect.None"></TabAnimationNext>
                </TabAnimationSettings>
                <TabItems>
                    @foreach (var file in Context.Files)
                    {
                        switch (Context.TargetCompany.Name)
                        {
                            case nameof(SupportedCompanies.Lonira):
                                <LoniraTabItemContent File="@file"/>
                                break;
                            case nameof(SupportedCompanies.Suliver):
                                break;
                            default:
                                break;
                        }
                    }
                </TabItems>
            </SfTab>
        }
    </RadzenCard>
}

@code {

    [Parameter] public ConverterContext Context { get; set; }

    private bool _isLoadingFiles = true;

    protected override void OnInitialized()
    {
        Context.PropertyChanged += ContextPropertyChanged;
    }

    private void ContextPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        Context.Files.Clear();
        _isLoadingFiles = true;
        if (Context?.TargetCompany?.Name == nameof(SupportedCompanies.Lonira))
        {
            var groups = Context.Details.GroupBy(x => x.Material).ToList();
            foreach (var group in groups.Where(group => !string.IsNullOrEmpty(group.Key)))
            {
                Context.Files.Add(new KroikoFile { FileName = group.Key, Details = group.ToList().ToLoniraDetails() });
            }
        }
        _isLoadingFiles = false;
        StateHasChanged();
    }

    public void Dispose()
    {
        Context.PropertyChanged -= ContextPropertyChanged;
    }

    private void OnTabItemSelected(SelectingEventArgs obj)
    {
        if (obj.IsSwiped)
        {
            obj.Cancel = true;
        }
    }

}
<style>
    .e-tab .e-tab-header {
       background: #FAFAFA !important;
       color: whitesmoke;
   }
   .e-tab .e-tab-header .e-toolbar-item.e-active {
        border-left: 1px solid black;
        border-top: 1px solid black;
        border-right: 1px solid black;
        border-radius: 6px 6px 0 0;
        color: black;
    }
    .e-tab .e-tab-header .e-toolbar-item .e-tab-wrap:hover {
        border-left: 1px solid black;
        border-top: 1px solid black;
        border-right: 1px solid black;
        border-radius: 6px 6px 0 0;
        color: black;
     }
   .e-tab .e-content {
        background: #FAFAFA !important;
        border: 1px solid black;
   }
</style>