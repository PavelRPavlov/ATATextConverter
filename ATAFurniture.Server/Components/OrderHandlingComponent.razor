@using ATAFurniture.Server.Models
@using Kroiko.Domain.ExcelFilesGeneration
@using Kroiko.Domain.TemplateBuilding
@using Microsoft.Extensions.DependencyInjection
@using System.IO

@implements IDisposable

@if (_areFilesReady)
{
    <RadzenCard>
        <RadzenRow>
            <RadzenColumn>
                <SfRadioButton TChecked="bool" Name="options" Label="Генерирай файлове за сваляне" @onclick="OnCreateFilesClicked"></SfRadioButton>
            </RadzenColumn>
            <RadzenColumn>
                <SfRadioButton TChecked="bool" Name="options" Label="Изпрати e-mail поръчка" @onclick="OnSendEmailClick"></SfRadioButton>
            </RadzenColumn>
        </RadzenRow>
        @if (_shouldGenerateFiles)
        {
            @if (_areFilesGenerating)
            {
                <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                    <Template><h6>Working</h6></Template>
                </RadzenProgressBarCircular>
            }
            else
            {
                <ul>
                    @foreach (var file in _files)
                    {
                        <li><a href="@file.Url" download="@file.Name">@file.Name</a></li>
                    }
                </ul>
            }
        }
        @if (_shouldSendEmail)
        {
            <SfButton Icon="email" CssClass="sf-button-primary" Content="Изпрати e-mail поръчка" @onclick="OnSendEmailClick"></SfButton>
        }
    </RadzenCard>
}

@code {
    [Inject] public FileGeneratorService FileGenerator { get; set; }
    [Inject] public IServiceProvider ServiceProvider { get; set; }
    [Inject] public ILogger<OrderHandlingComponent> Logger { get; set; }

    [Parameter] public ConverterContext Context { get; set; }

    private bool _shouldGenerateFiles = false;
    private bool _shouldSendEmail = false;
    private bool _areFilesReady = false;
    private bool _areFilesGenerating = false;
    private readonly List<DirectoryInfo> _sessionDirs = [];
    private List<FileDisplayContext> _files = [];

    protected override void OnInitialized()
    {
        Context.PropertyChanged += ContextOnPropertyChanged;
    }

    private void ContextOnPropertyChanged(object sender, PropertyChangedEventArgs e)
    {
        if (e.PropertyName == nameof(ConverterContext.Files))
        {
            _shouldSendEmail = false;
            _shouldGenerateFiles = false;
            _files.Clear();
            _areFilesReady = Context.Files.Any();;
            StateHasChanged();
        }
    }

    private async Task OnCreateFilesClicked()
    {
        _shouldGenerateFiles = true;
        _shouldSendEmail = false;
        var fileNameProvider = ServiceProvider.GetRequiredKeyedService(typeof(IFileNameProvider), Context.TargetCompany.Name) as IFileNameProvider;
        if (fileNameProvider is null)
        {
            Logger.LogError("No file name provider found for company {CompanyName}", Context.TargetCompany.Name);
        }

        var templateBuilder = ServiceProvider.GetRequiredKeyedService(typeof(ITemplateBuilder), Context.TargetCompany.Name) as ITemplateBuilder;
        if (templateBuilder is null)
        {
            Logger.LogError("No template builder found for company {CompanyName}", Context.TargetCompany.Name);
        }
        
        _areFilesGenerating = true;
        var alreadyGeneratedFiles = await FileGenerator.CreateFiles(Context.ContactInfo, Context.Files, templateBuilder, fileNameProvider);
        _files = await SaveFilesLocallyForDownload(alreadyGeneratedFiles);
        _areFilesGenerating = false;
        StateHasChanged();
        
        // TODO consume credit???
    }

    private async Task<List<FileDisplayContext>> SaveFilesLocallyForDownload(List<FileSaveContext> alreadyGeneratedFiles)
    {
        var result = new List<FileDisplayContext>();
        foreach (var file in alreadyGeneratedFiles)
        {
            result.Add(await CreateFileDownloadLink(file));
        }

        return result;
    }
    
    private async Task<FileDisplayContext> CreateFileDownloadLink(FileSaveContext context)
    {
        var filesRootPath = "files";
        var salt = Guid.NewGuid().ToString();
        var sessionFolder = Path.Combine(
            Environment.CurrentDirectory,
            "wwwroot",
            filesRootPath,
            salt);
        var sessionDir = Directory.CreateDirectory(sessionFolder);
        _sessionDirs.Add(sessionDir);

        await File.WriteAllBytesAsync(
            Path.Combine(
                sessionDir.FullName,
                context.FileName),
            context.Content);
        return new FileDisplayContext { Name = context.FileName, Url = Path.Combine(filesRootPath, salt, context.FileName) };
    }

    private void OnSendEmailClick()
    {
        _shouldGenerateFiles = false;
        _shouldSendEmail = true;
        // TODO trigger SendGrid to send email
        StateHasChanged();
    }

    public void Dispose()
    {
        Context.PropertyChanged -= ContextOnPropertyChanged;
        _files.Clear();
        
        foreach (var sessionDir in _sessionDirs)
        {
            sessionDir.Delete(true);
        }
    }
}