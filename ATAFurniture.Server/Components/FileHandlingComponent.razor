@using ATAFurniture.Server.Models
@using System.IO
@using Kroiko.Domain
@using Kroiko.Domain.CellsExtracting
@using Kroiko.Domain.ExcelFilesGeneration
@using Kroiko.Domain.TemplateBuilding
@using Microsoft.AspNetCore.Hosting
@using Microsoft.Extensions.DependencyInjection
@using Microsoft.Extensions.Hosting
@implements IDisposable

@if (_isBusy)
{
    <RadzenStack>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate"/>
    </RadzenStack>
}
else
{
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenLabel Text="Налични кредити: "/><RadzenLabel Text="@UserContextService.User.CreditsCount.ToString()"></RadzenLabel>
        @if (UserContextService.User.CreditsCount <= 0)
        {
            <RadzenColumn Size="12" SizeMD="8">
                <RadzenButton Text="Добави кредити"
                              Icon="add_circle_outline"
                              ButtonStyle="ButtonStyle.Secondary"
                              Click="OnAddCreditsButtonPress"/>
            </RadzenColumn>
        }
    </RadzenRow>

    <RadzenPanel AllowCollapse="true">
        <HeaderTemplate>
            <RadzenRow class="my-3">
                <RadzenIcon Icon="difference"></RadzenIcon> Files
            </RadzenRow>
        </HeaderTemplate>
        <ChildContent>
            <RadzenSplitter Orientation="Orientation.Horizontal" Collapse=@OnCollapseDisabled >
                <RadzenSplitterPane Collapsible="false" Size="40%" Max="50%" Min="30%">
                    <RadzenStack>
                        <RadzenLabel Text="Избери Polyboard файл:"></RadzenLabel>
                        <InputFile disabled="@(UserContextService.User.CreditsCount <= 0)" OnChange="@LoadFiles"/>
                    </RadzenStack>
                </RadzenSplitterPane>
                <RadzenSplitterPane Collapsible="false" Size="60%" >
                    @if (_isLoadingFiles)
                    {
                        <RadzenColumn>
                            <RadzenProgressBarCircular ShowValue="true" Mode="ProgressBarMode.Indeterminate" Size="ProgressBarCircularSize.Large">
                                <Template><h6>Working</h6></Template>
                            </RadzenProgressBarCircular>
                        </RadzenColumn>
                    }
                    @if (_isError)
                    {
                        <RadzenAlert Text="Каченият файл не отговаря на изискванията за формат! Кредити не са консумирани. Може да опитате с друг файл." AlertStyle="AlertStyle.Danger" Variant="Variant.Filled"></RadzenAlert>
                    }
                    @if(_files.Count > 0)
                    {
                        <RadzenLabel class="ms-3" Text="Download files:"></RadzenLabel>
                        <RadzenColumn>
                            <RadzenStack Gap="1em">
                                <ul>
                                    @foreach (var file in _files)
                                    {
                                        <li><a href="@file.Url" download="@file.Name">@file.Name</a></li>
                                    }
                                </ul>
                            </RadzenStack>
                        </RadzenColumn>
                    }
                </RadzenSplitterPane>
            </RadzenSplitter>
        </ChildContent>
    </RadzenPanel>
}

@code {
    [Inject] FileGeneratorService FileGeneratorService { get; set; }
    [Inject] ILogger<FileHandlingComponent> Logger { get; set; }
    [Inject] IWebHostEnvironment Environment { get; set; }
    [Inject] UserContextService UserContextService { get; set; }
    [Inject] IServiceProvider ServiceProvider { get; set; }

    [CascadingParameter] TemporaryContactInfo TemporaryContactInfo { get; set; }
    [CascadingParameter] SupportedCompany TargetCompany { get; set; }

    private readonly List<FileDisplayContext> _files = [];
    private readonly List<DirectoryInfo> _sessionDirs = [];
    private bool _isBusy = false;
    private bool _isLoadingFiles = false;
    private bool _isError = false;

    protected override async Task OnInitializedAsync()
    {
        _isBusy = true;
        await UserContextService.EnrichUserContextWithDbData();
        _isBusy = false;
    }

    private async Task OnAddCreditsButtonPress(MouseEventArgs obj)
    {
        // trigger the payment flow
        // move this to the webhook the flow will call
        await UserContextService.AddCredits(10, true);
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        if (UserContextService.User.CreditsCount <= 0)
        {
            return;
        }

        List<FileSaveContext> createdFiles = new();

        var templateBuilder = ServiceProvider.GetKeyedService<ITemplateBuilder>(TargetCompany.Name);
        var fileNameProvider = ServiceProvider.GetKeyedService<IFileNameProvider>(TargetCompany.Name);

        _isBusy = false;
        _isError = false;
        _isLoadingFiles = true;
        foreach (var file in e.GetMultipleFiles(1))
        {
            try
            {
                using MemoryStream memoryStream = new();
                await file.OpenReadStream().CopyToAsync(memoryStream);
                createdFiles = await FileGeneratorService.CreateFiles(
                    memoryStream,
                    new ContactInfo(
                        TemporaryContactInfo?.CompanyName ?? UserContextService.User.CompanyName,
                        TemporaryContactInfo?.MobileNumber ?? UserContextService.User.MobileNumber,
                        TargetCompany),
                    templateBuilder,
                    fileNameProvider);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error while creating excel file");
                return;
            }
        }

        _files.Clear();
        if (createdFiles is null)
        {
            _isError = true;
            _isLoadingFiles = false;
            _isBusy = false;
            return;
        }
        
        foreach (var file in createdFiles)
        {
            await SaveFile(file);
        }

        _isLoadingFiles = false;

        await UserContextService.ConsumeSingleCredit();
    }

    private async Task SaveFile(FileSaveContext context)
    {
        var filesRootPath = "files";
        var salt = Guid.NewGuid().ToString();
        var sessionFolder = Path.Combine(
            Environment.ContentRootPath,
            "wwwroot",
            filesRootPath,
            salt);
        var sessionDir = Directory.CreateDirectory(sessionFolder);
        _sessionDirs.Add(sessionDir);

        await File.WriteAllBytesAsync(
            Path.Combine(
                sessionDir.FullName,
                context.FileName),
            context.Content);
        _files.Add(new FileDisplayContext { Name = context.FileName, Url = Path.Combine(filesRootPath, salt, context.FileName) });
    }

    void OnCollapseDisabled(RadzenSplitterEventArgs args)
    {
        args.Cancel = true;
    }

    public void Dispose()
    {
        foreach (var sessionDir in _sessionDirs)
        {
            sessionDir.Delete(true);
        }
    }
}